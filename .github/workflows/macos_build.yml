name: Android and iOS build on MacOS

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@master

    - name: Set XCode Version
      run: sudo xcode-select -s /Applications/Xcode_11.app

    - name: Installing Homebrew
      run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

    - name: Installing Java 8
      run: brew tap adoptopenjdk/openjdk && brew cask install adoptopenjdk/openjdk/adoptopenjdk8

    - name: Installing Gradle
      run: brew upgrade gradle

    - name: Installing Android Studio
      run: brew cask install android-sdk

    - name: Setting Variables
      run: |
        export GRADLE_HOME=/usr/local/opt/gradle
        export ANDROID_HOME=/usr/local/share/android-sdk
        export PATH=$GRADLE_HOME/bin:$PATH
        export PATH=$ANDROID_HOME/tools:$PATH
        export PATH=$ANDROID_HOME/platform-tools:$PATH

    - name: Updating SDK Manager
      run: sdkmanager --update

    - name: List available packages for Debug
      run: sdkmanager --list

    - name: Download Buildtools 28.0.3
      run: (echo y; echo y; echo y;) | sdkmanager "build-tools;28.0.3"

    - name: Download Android 28
      run: (echo y; echo y; echo y;) | sdkmanager "platforms;android-28"

    - name: Download Android Platform Tools
      run: (echo y; echo y; echo y;) | sdkmanager "platform-tools"

    - name: Download Support Library Android M2
      run: (echo y; echo y; echo y;) | sdkmanager "extras;android;m2repository"

    - name: Download Support Library Google M2
      run: (echo y; echo y; echo y;) | sdkmanager "extras;google;m2repository"

    - name: Download Support Library Solver for ConstraintLayout 1.0.2
      run: (echo y; echo y; echo y;) | sdkmanager "extras;m2repository;com;android;support;constraint;constraint-layout;1.0.2"

    - name: Download Support Library ConstraintLayout for Android 1.0.2
      run: (echo y; echo y; echo y;) | sdkmanager "extras;m2repository;com;android;support;constraint;constraint-layout-solver;1.0.2"

    - name: Download Android SDK Command line tools
      run: (echo y; echo y; echo y;) | sdkmanager "cmdline-tools;latest"

    - name: Download Google Services
      run: (echo y; echo y; echo y;) | sdkmanager "extras;google;google_play_services"

    - name: Download System Image Default
      run: (echo y; echo y; echo y;) | sdkmanager "system-images;android-28;default;x86_64"

    - name: Download System Image Google APIs
      run: (echo y; echo y; echo y;) | sdkmanager "system-images;android-28;google_apis;x86_64"

    - name: List current SDK Install
      run: sdkmanager --list

    - name: Adding Build tools to Path
      run: export PATH=$ANDROID_HOME/build-tools/$(ls -tr $ANDROID_HOME/build-tools/ | tail -1):$PATH

    # This is ugly but it is the only thing that seems to work.
    - name: Accepting Android license
      run: (echo y; echo y; echo y; echo y; echo y; echo y) | $ANDROID_HOME/tools/bin/sdkmanager --licenses

    - name: Installing CocoaPods
      run: gem install cocoapods

    - name: Update Pods
      run: pod repo update
      working-directory: ./ios

    - name: Yarn Install
      run: yarn install

    - name: Pod Install
      run: pod install
      working-directory: ./ios

    - name: Asset Directory
      run: mkdir -p ./android/app/src/main/assets

    - name: Setting Environment Variables
      env:
        googleMapApiKey=${{ GOOGLE_MAP_API_KEY }}
        mapIdsInventory=${{ MAPS_ID_INVENTORY }}
        bugsnagApiKey=${{ BUGSNAG_API_KEY }}
        locationApikKey=${{ LOCATION_API_KEY }}
        host=app.plant-for-the-planet.org
        mediaPath=/media/cache
        scheme=https
        base=
        currency=EUR
        androidAppId=org.pftp
        iosAppId=1444740626
        api_url=https://app-development.plant-for-the-planet.org
        debug=true
        env=develop
      run: |
        echo $googleMapApiKey $mapIdsInventory $bugsnagApiKey $host $mediaPath $scheme $base $currency $androidAppId $iosAppId $api_url $debug $env.


    - name: Overide Environment if Master Branch
      if: endsWith(github.ref, '/master')
      run: |
        echo "::set-env name=api_url::https://www.trilliontreecampaign.org";
        echo "::set-env name=debug::false";
        echo "::set-env name=env::production";

    - name: Overide Environment if Test Branch
      if: endsWith(github.ref, '/test')
      run: |
        echo "::set-env name=api_url::https://app-staging.plant-for-the-planet.org";
        echo "::set-env name=debug::true";
        echo "::set-env name=env::staging";

    - name: Building React Native Bundle Android
      run: |
            react-native bundle \
                --platform android \
                --dev false \
                --entry-file index.js \
                --bundle-output android-release.bundle \
                --sourcemap-output android-release.bundle.map

    - name: Building React Native Bundle iOS
      run: |
            react-native bundle \
                --platform ios \
                --dev false \
                --entry-file index.js \
                --bundle-output ios-release.bundle \
                --sourcemap-output ios-release.bundle.map


#    - name: Checking Gradle dependencies
#      run: ./gradlew check
#      working-directory: ./android

#    - name: Android Build
#      run: ./gradlew build
#      working-directory: ./android

#    - name: iOS Build
#      run: xcodebuild -workspace PrivateKit.xcworkspace -configuration Release -scheme PrivateKit
